{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "blue",
    "glyph" : "mobile-alt"
  },
  "name" : "电信",
  "script" : "\/**\n * Author:LSP\n * Date:2024-04-19\n *\/\n\/\/ -------------------------------------------------------\n\/\/ 是否是开发环境，配合手机端调试使用，正式发布设置为false\nconst isDev = false;\nconst dependencyLSP = '20240419_1';\nconsole.log(`当前环境 👉👉👉👉👉 ${isDev ? 'DEV' : 'RELEASE'}`);\nconsole.log(`----------------------------------------`);\n\/\/ 分支\nconst branch = 'v2';\n\/\/ 仓库根目录\nconst remoteGithubRoot = `https:\/\/raw.githubusercontent.com\/Enjoyee\/Scriptable\/${branch}`;\nconst remoteHomeLandRoot = `https:\/\/glimmerk.coding.net\/p\/Scriptable\/shared-depot\/source\/git\/raw\/${branch}`;\n\/\/ 依赖包目录\nconst fm = FileManager.local();\nconst rootDir = fm.documentsDirectory();\nconst cacheDir = fm.joinPath(rootDir, 'LSP');\nconst dependencyFileName = isDev ? \"_LSP.js\" : `${cacheDir}\/_LSP.js`;\n\/\/ 下载依赖包\nawait downloadLSPDependency();\n\/\/ -------------------------------------------------------\nif (typeof require === 'undefined') require = importModule\n\/\/ 引入相关方法\nconst { BaseWidget } = require(dependencyFileName);\n\n\/\/ @定义小组件\nclass Widget extends BaseWidget {\n\n  defaultPreference = {\n    cache_key_detail: 'detail',\n    cache_key_balance: 'balance',\n    fetchUrl: {\n      home: 'https:\/\/e.dlife.cn\/wap\/mine\/showIndex.do#\/',\n      detail: 'https:\/\/e.dlife.cn\/user\/package_detail.do',\n      balance: 'https:\/\/e.dlife.cn\/user\/balance.do',\n    },\n    titleDayColor: '#000000',\n    titleNightColor: '#278da2',\n    descDayColor: '#000000',\n    descNightColor: '#278da2',\n    refreshTimeDayColor: '#000000',\n    refreshTimeNightColor: '#278da2',\n  };\n\n  fee = {\n    title: '📱 剩余话费：',\n    balance: 0,\n    unit: '元',\n  };\n\n  voice = {\n    title: '⏳ 剩余语音：',\n    balance: 0,\n    percent: 0,\n    unit: '分钟',\n  };\n\n  flow = {\n    title: '⛽️ 剩余流量：',\n    balance: 0,\n    percent: 0,\n    unit: 'MB',\n  };\n\n  getValueByKey = (key) => this.readWidgetSetting()[key] ?? this.defaultPreference[key];\n\n  titleDayColor = () => this.getValueByKey('titleDayColor');\n  titleNightColor = () => this.getValueByKey('titleNightColor');\n\n  descDayColor = () => this.getValueByKey('descDayColor');\n  descNightColor = () => this.getValueByKey('descNightColor');\n\n  refreshTimeDayColor = () => this.getValueByKey('refreshTimeDayColor');\n  refreshTimeNightColor = () => this.getValueByKey('refreshTimeNightColor');\n\n  constructor(scriptName) {\n    super(scriptName);\n    this.reset = false;\n    this.defaultConfig.bgType = '3';\n    this.backgroundColor = '#FEFCF3,#0A2647';\n    this.cookie = this.getValueByKey('cookie');\n  }\n\n  async getAppViewOptions() {\n    return {\n      widgetProvider: {\n        small: true, \/\/ 是否提供小号组件\n        medium: false, \/\/ 是否提供中号组件\n        large: false, \/\/ 是否提供大号组件\n      },\n      \/\/ 预览界面的组件设置item\n      settingItems: [\n        {\n          name: 'chinaTelecomCK',\n          label: '天翼信息',\n          type: 'cell',\n          icon: `${this.getRemoteRootPath()}\/img\/icon_10000.png`,\n          needLoading: true,\n          desc: this.getValueByKey('loginMiddle')?.length > 0 ? '已填写' : '未填写'\n        },\n        {\n          name: 'filterOrientateFlow',\n          label: '过滤定向流量',\n          type: 'switch',\n          icon: { name: 'bag.fill', color: '#F14A16', },\n          needLoading: false,\n          default: false\n        },\n        {\n          name: 'showUsedFlow',\n          label: '显示已使用流量',\n          type: 'switch',\n          icon: { name: 'archivebox.fill', color: '#ECA97A', },\n          needLoading: false,\n          default: false\n        },\n        {\n          name: 'otherSetting',\n          label: '其他设置',\n          type: 'cell',\n          icon: 'https:\/\/cdnjson.com\/images\/2024\/02\/05\/settings.png',\n          needLoading: true,\n          childItems: [\n            {\n              items: [\n                {\n                  name: 'titleDayColor',\n                  label: '标题浅色颜色',\n                  type: 'color',\n                  icon: { name: 'pencil.and.outline', color: '#3a86ff', },\n                  needLoading: false,\n                  default: this.titleDayColor(),\n                },\n                {\n                  name: 'titleNightColor',\n                  label: '标题深色颜色',\n                  type: 'color',\n                  icon: { name: 'square.and.pencil', color: '#3a0ca3', },\n                  needLoading: false,\n                  default: this.titleNightColor(),\n                },\n              ],\n            },\n            {\n              items: [\n                {\n                  name: 'descDayColor',\n                  label: '内容浅色颜色',\n                  type: 'color',\n                  icon: { name: 'pencil.and.outline', color: '#3a86ff', },\n                  needLoading: false,\n                  default: this.descDayColor(),\n                },\n                {\n                  name: 'descNightColor',\n                  label: '内容深色颜色',\n                  type: 'color',\n                  icon: { name: 'square.and.pencil', color: '#3a0ca3', },\n                  needLoading: false,\n                  default: this.descNightColor(),\n                },\n              ],\n            },\n            {\n              items: [\n                {\n                  name: 'refreshTimeDayColor',\n                  label: '刷新时间浅色颜色',\n                  type: 'color',\n                  icon: { name: 'pencil.and.outline', color: '#3a86ff', },\n                  needLoading: false,\n                  default: this.refreshTimeDayColor(),\n                },\n                {\n                  name: 'refreshTimeNightColor',\n                  label: '刷新时间深色颜色',\n                  type: 'color',\n                  icon: { name: 'square.and.pencil', color: '#3a0ca3', },\n                  needLoading: false,\n                  default: this.refreshTimeNightColor(),\n                },\n              ],\n            },\n          ]\n        },\n      ],\n      \/\/ cell类型的item点击回调\n      onItemClick: async (item) => {\n        let insertDesc;\n        const widgetSetting = this.readWidgetSetting();\n        switch (item.name) {\n          case 'chinaTelecomCK':\n            let loginMiddle;\n            let selectIndex = await this.generateAlert('登录信息填写', '1.复制链接进行网页登录\\n2.抓取包含loginMiddle.do链接进行填入', ['复制地址', '填入链接']);\n            if (selectIndex == 0) {\n              Pasteboard.copy(this.defaultPreference.fetchUrl.home);\n              await this.generateAlert('提示', '登录链接已复制，请自行网页登录抓包', [\"好的\"])\n            } else {\n              await this.generateInputAlert({\n                title: '登录信息链接填写',\n                message: '填入抓取包含loginMiddle.do的链接',\n                options: [\n                  { hint: '请输入链接', value: '' },\n                ]\n              }, async (inputArr) => {\n                this.reset = true;\n                loginMiddle = inputArr[0].value;\n                \/\/ 保存配置\n                widgetSetting['loginMiddle'] = loginMiddle;\n              });\n            }\n            insertDesc = loginMiddle?.length > 0 ? '已填写' : '未填写';\n            this.writeWidgetSetting({ ...widgetSetting });\n            break;\n        }\n        return {\n          desc: { value: insertDesc },\n        };\n      },\n    };\n  }\n\n  async render({ widgetSetting }) {\n    return await this.provideSmallWidget(widgetSetting);\n  }\n\n  async provideSmallWidget(widgetSetting) {\n    \/\/ ========================================\n    let loginMiddle = widgetSetting.loginMiddle;\n    if (loginMiddle) {\n      console.log('获取加载ck...');\n      const req = new Request(widgetSetting.loginMiddle);\n      req.credentials = 'include';\n      await req.load();\n      const cookieResArr = req.response.cookies;\n      const ckArr = cookieResArr?.map(item => `${item.name}=${item.value}`);\n      const ck = ckArr.join(';')\n      widgetSetting['cookie'] = ck;\n      this.cookie = ck;\n      console.log(`获取到的ck：${ck}`);\n    } else {\n      console.error('❌❌❌❌❌未配置登录链接❌❌❌❌❌');\n    }\n    console.log(`=======================================`);\n\n    \/\/ ========================================\n    await this.loadMoneyBalance();\n    await this.loadDetailInfo(widgetSetting);\n    const voiceBalance = this.voice.balance;\n    \/\/ ========================================\n    const widget = new ListWidget();\n    widget.setPadding(0, 0, 0, 0);\n    \/\/ ========================================\n    const widgetSize = this.getWidgetSize('小号');\n    let stack = widget.addStack();\n    let image = await this.getImageByUrl(`${this.getRemoteRootPath()}\/img\/bg_doraemon_1.png`);\n    stack.setPadding(4, 12, 0, 12);\n    stack.backgroundImage = image;\n    stack.size = new Size(widgetSize.width, widgetSize.height);\n    stack.layoutVertically();\n    stack.addSpacer();\n    \/\/ ========================================\n    const titleFont = Font.lightSystemFont(13);\n    const infoFont = Font.mediumSystemFont(16);\n    const titleTextColor = Color.dynamic(new Color(this.titleDayColor()), new Color(this.titleNightColor()));\n    const descTextColor = Color.dynamic(new Color(this.descDayColor()), new Color(this.descNightColor()));\n    const refreshTimeTextColor = Color.dynamic(new Color(this.refreshTimeDayColor()), new Color(this.refreshTimeNightColor()));\n    const descSpacer = 3;\n    const lineSpacer = 4;\n    const descLeftSpacer = 22;\n    \/\/ ========================================\n    let textSpan = stack.addText(`${this.fee.title}`);\n    textSpan.textColor = titleTextColor;\n    textSpan.font = titleFont;\n    \/\/ \n    stack.addSpacer(descSpacer);\n    let displayStack = stack.addStack();\n    displayStack.centerAlignContent();\n    displayStack.addSpacer(descLeftSpacer);\n    textSpan = displayStack.addText(`${this.fee.balance}${this.fee.unit}`);\n    textSpan.textColor = descTextColor;\n    textSpan.font = infoFont;\n    displayStack.addSpacer();\n    \/\/ ========================================\n    stack.addSpacer(lineSpacer);\n    textSpan = stack.addText(`${this.voice.title} `);\n    textSpan.textColor = titleTextColor;\n    textSpan.font = titleFont;\n    \/\/ \n    stack.addSpacer(descSpacer);\n    displayStack = stack.addStack();\n    displayStack.centerAlignContent();\n    displayStack.addSpacer(descLeftSpacer);\n    textSpan = displayStack.addText(`${voiceBalance}${this.voice.unit}`);\n    textSpan.textColor = descTextColor;\n    textSpan.font = infoFont;\n    displayStack.addSpacer();\n    \/\/ ========================================\n    stack.addSpacer(lineSpacer);\n    textSpan = stack.addText(`${this.flow.title} `);\n    textSpan.textColor = titleTextColor;\n    textSpan.font = titleFont;\n    \/\/ \n    stack.addSpacer(descSpacer);\n    displayStack = stack.addStack();\n    displayStack.centerAlignContent();\n    displayStack.addSpacer(descLeftSpacer);\n    textSpan = displayStack.addText(`${this.flow.balance}${this.flow.unit}`);\n    textSpan.textColor = descTextColor;\n    textSpan.font = infoFont;\n    displayStack.addSpacer();\n    \/\/ ========================================\n\n    \/\/ ========================================\n    stack.addSpacer(6);\n    let btStack = stack.addStack();\n    btStack.centerAlignContent();\n    btStack.addSpacer(6);\n    image = this.getSFSymbol('goforward');\n    let imgSpan = btStack.addImage(image);\n    imgSpan.imageSize = new Size(9, 9);\n    imgSpan.tintColor = refreshTimeTextColor;\n    btStack.addSpacer(4);\n    if (this.success) {\n      this.lastUpdate = this.getDateStr(new Date(), 'HH:mm:ss');\n    }\n    textSpan = btStack.addText(`${this.getDateStr(new Date(), 'HH:mm:ss')} `);\n    textSpan.textColor = refreshTimeTextColor;\n    textSpan.font = Font.lightSystemFont(10);\n    btStack.addSpacer();\n    image = await this.getImageByUrl(`${this.getRemoteRootPath()}\/img\/ic_logo_10000.jpg`);\n    imgSpan = btStack.addImage(image);\n    imgSpan.imageSize = new Size(14, 14);\n    stack.addSpacer();\n    \/\/=================================\n    return widget;\n  }\n\n  \/\/ --------------------------NET START--------------------------\n  bodyText2Response = async (webview, cacheKey) => {\n    const widgetSetting = this.readWidgetSetting();\n    const text = await webview.evaluateJavaScript(\"document.body.innerText\");\n    const ck = await webview.evaluateJavaScript(\"document.cookie\");\n    console.log(`CK:${ck} `);\n    let RES;\n    try {\n      this.success = true;\n      RES = JSON.parse(text);\n      widgetSetting['loginRes'] = 'login';\n      this.useFileManager().writeJSONCache(cacheKey, RES);\n    } catch (error) {\n      this.success = false;\n      widgetSetting['loginRes'] = '';\n      console.error(`加载出错：${text} `);\n    }\n    this.writeWidgetSetting(widgetSetting);\n    return RES;\n  }\n\n  \/**\n   * 加载账户余额\n   *\/\n  loadMoneyBalance = async () => {\n    const response = await this.httpGet(\n      this.defaultPreference.fetchUrl.balance,\n      {\n        useCache: this.reset ?? false,\n        dataSuccess: (res) => res.serviceResultCode == '0',\n        headers: {\n          'cookie': this.cookie\n        }\n      }\n    );\n    this.fee.balance = response == undefined || response['serviceResultCode'] == 0 ? parseFloat(parseInt(response?.totalBalanceAvailable || 0) \/ 100).toFixed(2) : 'NAN';\n  }\n\n  \/**\n   * 流量格式化\n   * @param {*} flow \n   * @returns \n   *\/\n  formatFlow = (flow) => {\n    const remain = flow \/ 1024;\n    if (remain < 1024) {\n      return { amount: remain.toFixed(2), unit: 'MB' };\n    }\n    return { amount: (remain \/ 1024).toFixed(2), unit: 'GB' };\n  }\n\n  \/**\n   * 加载明细\n   * @returns \n   *\/\n  loadDetailInfo = async (widgetSetting) => {\n    const { filterOrientateFlow, showUsedFlow } = widgetSetting;\n    const response = await this.httpGet(\n      this.defaultPreference.fetchUrl.detail,\n      {\n        useCache: this.reset ?? false,\n        dataSuccess: (res) => res.paraFieldResult == 'SUCCESS',\n        headers: {\n          'cookie': this.cookie\n        }\n      }\n    );\n    \/\/ 总流量\n    let totalFlowAmount = 0;\n    \/\/ 剩余流量\n    let totalBalanceFlowAmount = 0;\n    \/\/ 已用流量\n    let totalUsedFlowAmount = 0;\n    \/\/ 总语音\n    let totalVoiceAmount = 0;\n    \/\/ 剩余语音\n    let totalBalanceVoiceAmount = 0;\n    \/\/ 语音\n    if (response?.voiceAmount && response?.voiceBalance) {\n      totalVoiceAmount = response.voiceAmount;\n      totalBalanceVoiceAmount = response.voiceBalance;\n    }\n    \/\/ 流量&语音\n    let isUnlimitedFlow = false;\n    response?.items?.forEach((data) => {\n      if (data.offerType !== 19) {\n        data.items?.forEach((item) => {\n          if (item.unitTypeId == 3) {\n            if (!(item.usageAmount == 0 && item.balanceAmount == 0)) {\n              let ratableResourcename = item.ratableResourcename;\n              let ratableAmount = item.ratableAmount;\n              let balanceAmount = item.balanceAmount;\n              let usedAmount = ratableAmount - balanceAmount;\n              console.log(`套餐名称：«${ratableResourcename}»`);\n              console.log(`套餐总流量：${ratableAmount} MB`);\n              console.log(`套餐剩余流量：${balanceAmount} MB`);\n              console.log(`套餐已用流量：${usedAmount} MB`);\n              console.log(`================================= `);\n              if (filterOrientateFlow && ratableResourcename.search('定向') != -1 || balanceAmount == '999999999999') {\n                ratableAmount = 0;\n                balanceAmount = 0;\n              }\n              totalFlowAmount += parseFloat(ratableAmount);\n              totalBalanceFlowAmount += parseFloat(balanceAmount);\n            }\n            totalUsedFlowAmount += parseFloat(item.usageAmount);\n            if (showUsedFlow) {\n              this.flow.title = '⛽️ 流量已用：';\n            }\n            if (data.offerType == 21 && item.ratableAmount == '0') {\n              \/\/ 无限流量用户\n              isUnlimitedFlow = true;\n            }\n          } else if (!response.voiceBalance && item.unitTypeId == 1) {\n            totalVoiceAmount += parseInt(item.ratableAmount);\n            totalBalanceVoiceAmount += parseInt(item.balanceAmount);\n          }\n        });\n      }\n    });\n    const totalFlowObj = this.formatFlow(totalFlowAmount);\n    const totalBalanceFlowObj = this.formatFlow(totalBalanceFlowAmount);\n    const totalUsedFlowObj = this.formatFlow(totalUsedFlowAmount);\n    const finalBalanceFlowObj = showUsedFlow ? totalUsedFlowObj : totalBalanceFlowObj;\n    console.log(`总流量：${totalFlowObj.amount}${totalFlowObj.unit} `);\n    console.log(`剩余流量：${totalBalanceFlowObj.amount}${totalBalanceFlowObj.unit} `);\n    console.log(`已使用流量：${totalUsedFlowObj.amount}${totalUsedFlowObj.unit} `);\n    console.log(`总语音：${totalVoiceAmount}${this.voice.unit} `);\n    console.log(`剩余语音：${totalBalanceVoiceAmount}${this.voice.unit} `);\n    console.log(`================================= `);\n    \/\/ 设置流量\n    this.flow.percent = ((totalBalanceFlowAmount \/ (totalFlowAmount || 1)) * 100).toFixed(2);\n    this.flow.balance = finalBalanceFlowObj.amount;\n    this.flow.unit = finalBalanceFlowObj.unit;\n    if (isUnlimitedFlow) {\n      const usageAmountObj = this.formatFlow(totalUsedFlowAmount);\n      this.flow.title = '⛽️ 流量已用：';\n      this.flow.balance = usageAmountObj.amount;\n      this.flow.unit = usageAmountObj.unit;\n    }\n    \/\/ 设置语音\n    this.voice.percent = ((totalBalanceVoiceAmount \/ (totalVoiceAmount || 1)) * 100).toFixed(2);\n    this.voice.balance = totalBalanceVoiceAmount;\n  }\n\n  \/\/ --------------------------NET END--------------------------\n}\n\nawait new Widget(Script.name()).run();\n\n\n\/\/ =================================================================================\n\/\/ =================================================================================\nasync function downloadLSPDependency() {\n  let fm = FileManager.local();\n  const fileName = fm.joinPath(fm.documentsDirectory(), `LSP\/${Script.name()}\/settings.json`);\n  const fileExists = fm.fileExists(fileName);\n  let cacheString = '{}';\n  if (fileExists) {\n    cacheString = fm.readString(fileName);\n  }\n  const use_github = JSON.parse(cacheString)['use_github'];\n  const dependencyURL = `${use_github ? remoteGithubRoot : remoteHomeLandRoot}\/_LSP.js`;\n  const update = needUpdateDependency();\n  if (isDev) {\n    const iCloudPath = FileManager.iCloud().documentsDirectory();\n    const localIcloudDependencyExit = fm.isFileStoredIniCloud(`${iCloudPath}\/_LSP.js`);\n    const localDependencyExit = fm.fileExists(`${rootDir}\/_LSP.js`);\n    const fileExist = localIcloudDependencyExit || localDependencyExit;\n    console.log(`🚀 DEV开发依赖文件${fileExist ? '已存在 ✅' : '不存在 🚫'}`);\n    if (!fileExist || update) {\n      console.log(`🤖 DEV 开始${update ? '更新' + dependencyLSP : '下载'}依赖~`);\n      keySave('VERSION', dependencyLSP);\n      await downloadFile2Scriptable('_LSP', dependencyURL);\n    }\n    return;\n  }\n\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n  console.log(`----------------------------------------`);\n  const remoteDependencyExit = fm.fileExists(`${cacheDir}\/_LSP.js`);\n  console.log(`🚀 RELEASE依赖文件${remoteDependencyExit ? '已存在 ✅' : '不存在 🚫'}`);\n  \/\/ ------------------------------\n  if (!remoteDependencyExit || update) { \/\/ 下载依赖\n    \/\/ 创建根目录\n    if (!fm.fileExists(cacheDir)) {\n      fm.createDirectory(cacheDir, true);\n    }\n    \/\/ 下载\n    console.log(`🤖 RELEASE开始${update ? '更新' : '下载'}依赖~`);\n    console.log(`----------------------------------------`);\n    const req = new Request(dependencyURL);\n    const moduleJs = await req.load();\n    if (moduleJs) {\n      fm.write(fm.joinPath(cacheDir, '\/_LSP.js'), moduleJs);\n      keySave('VERSION', dependencyLSP);\n      console.log('✅ LSP远程依赖环境下载成功！');\n      console.log(`----------------------------------------`);\n    } else {\n      console.error('🚫 获取依赖环境脚本失败，请重试！');\n      console.log(`----------------------------------------`);\n    }\n  }\n}\n\n\/**\n * 获取保存的文件名\n * @param {*} fileName \n * @returns \n *\/\nfunction getSaveFileName(fileName) {\n  const hasSuffix = fileName.lastIndexOf(\".\") + 1;\n  return !hasSuffix ? `${fileName}.js` : fileName;\n};\n\n\/**\n * 保存文件到Scriptable软件目录，app可看到\n * @param {*} fileName \n * @param {*} content \n * @returns \n *\/\nfunction saveFile2Scriptable(fileName, content) {\n  try {\n    const fm = FileManager.iCloud();\n    let fileSimpleName = getSaveFileName(fileName);\n    const filePath = fm.joinPath(fm.documentsDirectory(), fileSimpleName);\n    fm.writeString(filePath, content);\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\n\/**\n * 下载js文件到Scriptable软件目录\n * @param {*} moduleName 名称 \n * @param {*} url 在线地址 \n * @returns \n *\/\nasync function downloadFile2Scriptable(moduleName, url) {\n  const req = new Request(url);\n  const content = await req.loadString();\n  return saveFile2Scriptable(`${moduleName}`, content);\n};\n\n\/**\n * 是否需要更新依赖版本\n *\/\nfunction needUpdateDependency() {\n  return dependencyLSP != keyGet('VERSION');\n};\n\nfunction keySave(cacheKey, cache) {\n  if (cache) {\n    Keychain.set(Script.name() + cacheKey, cache);\n  }\n}\n\nfunction keyGet(cacheKey, defaultValue = '') {\n  if (Keychain.contains(Script.name() + cacheKey)) {\n    return Keychain.get(Script.name() + cacheKey);\n  } else {\n    return defaultValue;\n  }\n}\n\/\/ =================================================================================\n\/\/ =================================================================================",
  "share_sheet_inputs" : [

  ]
}