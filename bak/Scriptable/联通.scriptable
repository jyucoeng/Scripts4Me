{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "red",
    "glyph" : "mobile-alt"
  },
  "name" : "ËÅîÈÄö",
  "script" : "\/**\n * Author:LSP\n * Date:2023-04-15\n *\/\n\/\/ -------------------------------------------------------\n\/\/ ÊòØÂê¶ÊòØÂºÄÂèëÁéØÂ¢ÉÔºåÈÖçÂêàÊâãÊú∫Á´ØË∞ÉËØï‰ΩøÁî®ÔºåÊ≠£ÂºèÂèëÂ∏ÉËÆæÁΩÆ‰∏∫false\nconst isDev = false;\nconst dependencyLSP = '20230511';\nconsole.log(`ÂΩìÂâçÁéØÂ¢É üëâüëâüëâüëâüëâ ${isDev ? 'DEV' : 'RELEASE'}`);\nconsole.log(`----------------------------------------`);\n\/\/ ÂàÜÊîØ\nconst branch = 'v2';\n\/\/ ‰ªìÂ∫ìÊ†πÁõÆÂΩï\nconst remoteGithubRoot = `https:\/\/raw.githubusercontent.com\/Enjoyee\/Scriptable\/${branch}`;\nconst remoteHomeLandRoot = `https:\/\/glimmerk.coding.net\/p\/Scriptable\/shared-depot\/source\/git\/raw\/${branch}`;\n\/\/ ‰æùËµñÂåÖÁõÆÂΩï\nconst fm = FileManager.local();\nconst rootDir = fm.documentsDirectory();\nconst cacheDir = fm.joinPath(rootDir, 'LSP');\nconst dependencyFileName = isDev ? \"_LSP.js\" : `${cacheDir}\/_LSP.js`;\n\/\/ ‰∏ãËΩΩ‰æùËµñÂåÖ\nawait downloadLSPDependency();\n\/\/ -------------------------------------------------------\nif (typeof require === 'undefined') require = importModule\n\/\/ ÂºïÂÖ•Áõ∏ÂÖ≥ÊñπÊ≥ï\nconst { BaseWidget } = require(dependencyFileName);\n\n\/\/ @ÂÆö‰πâÂ∞èÁªÑ‰ª∂\nclass Widget extends BaseWidget {\n\n  defaultPreference = {\n    fetchUrl: {\n      detail: `https:\/\/m.client.10010.com\/mobileserviceimportant\/home\/queryUserInfoSeven?version=iphone_c@10.0100&desmobiel=13232135179&showType=0`,\n    },\n    titleDayColor: '#000000',\n    titleNightColor: '#999999',\n    descDayColor: '#000000',\n    descNightColor: '#999999',\n    refreshTimeDayColor: '#000000',\n    refreshTimeNightColor: '#999999',\n  };\n\n  fee = {\n    title: 'üì± Ââ©‰ΩôËØùË¥πÔºö',\n    balance: 0,\n    unit: 'ÂÖÉ',\n  };\n\n  voice = {\n    title: '‚è≥ Ââ©‰ΩôËØ≠Èü≥Ôºö',\n    balance: 0,\n    percent: 0,\n    unit: 'ÂàÜÈíü',\n  };\n\n  flow = {\n    title: '‚õΩÔ∏è Ââ©‰ΩôÊµÅÈáèÔºö',\n    balance: 0,\n    percent: 0,\n    unit: 'MB',\n  };\n\n  getValueByKey = (key) => this.readWidgetSetting()[key] ?? '';\n\n  titleDayColor = () => this.getValueByKey('titleDayColor');\n  titleNightColor = () => this.getValueByKey('titleNightColor');\n\n  descDayColor = () => this.getValueByKey('descDayColor');\n  descNightColor = () => this.getValueByKey('descNightColor');\n\n  refreshTimeDayColor = () => this.getValueByKey('refreshTimeDayColor');\n  refreshTimeNightColor = () => this.getValueByKey('refreshTimeNightColor');\n\n  constructor(scriptName) {\n    super(scriptName);\n    this.reset = false;\n    this.defaultConfig.bgType = '3';\n    this.backgroundColor = '#FEFCF3,#0A2647';\n    this.cookie = this.getValueByKey('cookie');\n  }\n\n  async getAppViewOptions() {\n    return {\n      widgetProvider: {\n        small: true, \/\/ ÊòØÂê¶Êèê‰æõÂ∞èÂè∑ÁªÑ‰ª∂\n        medium: false, \/\/ ÊòØÂê¶Êèê‰æõ‰∏≠Âè∑ÁªÑ‰ª∂\n        large: false, \/\/ ÊòØÂê¶Êèê‰æõÂ§ßÂè∑ÁªÑ‰ª∂\n      },\n      \/\/ È¢ÑËßàÁïåÈù¢ÁöÑÁªÑ‰ª∂ËÆæÁΩÆitem\n      settingItems: [\n        {\n          name: 'chinaUnicomCK',\n          label: 'ËÅîÈÄöCookie',\n          type: 'cell',\n          icon: `${this.getRemoteRootPath()}\/img\/icon_10010.png`,\n          needLoading: true,\n          desc: this.getValueByKey('cookie')?.length > 0 ? 'Â∑≤Â°´ÂÜô' : 'Êú™Â°´ÂÜô'\n        },\n        {\n          name: 'otherSetting',\n          label: 'ÂÖ∂‰ªñËÆæÁΩÆ',\n          type: 'cell',\n          icon: 'https:\/\/cdnjson.com\/images\/2024\/02\/05\/settings.png',\n          needLoading: true,\n          childItems: [\n            {\n              items: [\n                {\n                  name: 'titleDayColor',\n                  label: 'Ê†áÈ¢òÊµÖËâ≤È¢úËâ≤',\n                  type: 'color',\n                  icon: { name: 'pencil.and.outline', color: '#3a86ff', },\n                  needLoading: false,\n                  default: this.titleDayColor(),\n                },\n                {\n                  name: 'titleNightColor',\n                  label: 'Ê†áÈ¢òÊ∑±Ëâ≤È¢úËâ≤',\n                  type: 'color',\n                  icon: { name: 'square.and.pencil', color: '#3a0ca3', },\n                  needLoading: false,\n                  default: this.titleNightColor(),\n                },\n              ],\n            },\n            {\n              items: [\n                {\n                  name: 'descDayColor',\n                  label: 'ÂÜÖÂÆπÊµÖËâ≤È¢úËâ≤',\n                  type: 'color',\n                  icon: { name: 'pencil.and.outline', color: '#3a86ff', },\n                  needLoading: false,\n                  default: this.descDayColor(),\n                },\n                {\n                  name: 'descNightColor',\n                  label: 'ÂÜÖÂÆπÊ∑±Ëâ≤È¢úËâ≤',\n                  type: 'color',\n                  icon: { name: 'square.and.pencil', color: '#3a0ca3', },\n                  needLoading: false,\n                  default: this.descNightColor(),\n                },\n              ],\n            },\n            {\n              items: [\n                {\n                  name: 'refreshTimeDayColor',\n                  label: 'Âà∑Êñ∞Êó∂Èó¥ÊµÖËâ≤È¢úËâ≤',\n                  type: 'color',\n                  icon: { name: 'pencil.and.outline', color: '#3a86ff', },\n                  needLoading: false,\n                  default: this.refreshTimeDayColor(),\n                },\n                {\n                  name: 'refreshTimeNightColor',\n                  label: 'Âà∑Êñ∞Êó∂Èó¥Ê∑±Ëâ≤È¢úËâ≤',\n                  type: 'color',\n                  icon: { name: 'square.and.pencil', color: '#3a0ca3', },\n                  needLoading: false,\n                  default: this.refreshTimeNightColor(),\n                },\n              ],\n            },\n          ]\n        },\n      ],\n      \/\/ cellÁ±ªÂûãÁöÑitemÁÇπÂáªÂõûË∞É\n      onItemClick: async (item) => {\n        const widgetSetting = this.readWidgetSetting();\n        let insertDesc = widgetSetting.phone?.length > 0 && widgetSetting.cookie?.length > 0 ? 'Â∑≤Â°´ÂÜô' : 'Êú™Â°´ÂÜô';\n        switch (item.name) {\n          case 'chinaUnicomCK':\n            let phone;\n            let ck;\n            await this.generateInputAlert({\n              title: 'ÁôªÂΩï‰ø°ÊÅØÂ°´ÂÜô',\n              message: 'Ëá™Â∑±ÊäìÂèñËÅîÈÄöÂÆ¢Êà∑Á´ØappÁöÑcookieÂ°´ÂÖ•',\n              options: [\n                { hint: 'ËØ∑ËæìÂÖ•ËÅîÈÄöÂè∑Á†Å', value: widgetSetting?.phone ?? '' },\n                { hint: 'ËØ∑ËæìÂÖ•cookie', value: widgetSetting?.cookie ?? '' },\n              ]\n            }, async (inputArr) => {\n              this.reset = true;\n              phone = inputArr[0].value;\n              ck = inputArr[1].value;\n              \/\/ ‰øùÂ≠òÈÖçÁΩÆ\n              widgetSetting['phone'] = phone;\n              widgetSetting['cookie'] = ck;\n            });\n            this.cookie = widgetSetting.cookie;\n            insertDesc = phone?.length > 0 && ck?.length > 0 ? 'Â∑≤Â°´ÂÜô' : 'Êú™Â°´ÂÜô';\n            this.writeWidgetSetting({ ...widgetSetting });\n            break;\n        }\n        return {\n          desc: { value: insertDesc },\n        };\n      },\n    };\n  }\n\n  async render() {\n    return await this.provideSmallWidget();\n  }\n\n  async provideSmallWidget() {\n    \/\/ ========================================\n    await this.loadDetailInfo();\n    const voiceBalance = this.voice.balance;\n    \/\/ ========================================\n    const widget = new ListWidget();\n    widget.setPadding(0, 0, 0, 0);\n    \/\/ ========================================\n    const widgetSize = this.getWidgetSize('Â∞èÂè∑');\n    let stack = widget.addStack();\n    let image = await this.getImageByUrl(`${this.getRemoteRootPath()}\/img\/bg_doraemon_1.png`);\n    stack.setPadding(4, 12, 0, 12);\n    stack.backgroundImage = image;\n    stack.size = new Size(widgetSize.width, widgetSize.height);\n    stack.layoutVertically();\n    stack.addSpacer();\n    \/\/ ========================================\n    const titleFont = Font.lightSystemFont(13);\n    const infoFont = Font.mediumSystemFont(16);\n    const titleTextColor = Color.dynamic(new Color(this.titleDayColor()), new Color(this.titleNightColor()));\n    const descTextColor = Color.dynamic(new Color(this.descDayColor()), new Color(this.descNightColor()));\n    const refreshTimeTextColor = Color.dynamic(new Color(this.refreshTimeDayColor()), new Color(this.refreshTimeNightColor()));\n    const descSpacer = 3;\n    const lineSpacer = 4;\n    const descLeftSpacer = 22;\n    \/\/ ========================================\n    let textSpan = stack.addText(`${this.fee.title}`);\n    textSpan.textColor = titleTextColor\n    textSpan.font = titleFont;\n    \/\/ \n    stack.addSpacer(descSpacer);\n    let displayStack = stack.addStack();\n    displayStack.centerAlignContent();\n    displayStack.addSpacer(descLeftSpacer);\n    textSpan = displayStack.addText(`${this.fee.balance}${this.fee.unit}`);\n    textSpan.textColor = descTextColor\n    textSpan.font = infoFont\n    displayStack.addSpacer();\n    \/\/ ========================================\n    stack.addSpacer(lineSpacer);\n    textSpan = stack.addText(`${this.voice.title}`);\n    textSpan.textColor = titleTextColor\n    textSpan.font = titleFont;\n    \/\/ \n    stack.addSpacer(descSpacer);\n    displayStack = stack.addStack();\n    displayStack.centerAlignContent();\n    displayStack.addSpacer(descLeftSpacer);\n    textSpan = displayStack.addText(`${voiceBalance}${this.voice.unit}`);\n    textSpan.textColor = descTextColor\n    textSpan.font = infoFont\n    displayStack.addSpacer();\n    \/\/ ========================================\n    stack.addSpacer(lineSpacer);\n    textSpan = stack.addText(`${this.flow.title}`);\n    textSpan.textColor = titleTextColor\n    textSpan.font = titleFont;\n    \/\/ \n    stack.addSpacer(descSpacer);\n    displayStack = stack.addStack();\n    displayStack.centerAlignContent();\n    displayStack.addSpacer(descLeftSpacer);\n    textSpan = displayStack.addText(`${this.flow.balance}${this.flow.unit}`);\n    textSpan.textColor = descTextColor\n    textSpan.font = infoFont\n    displayStack.addSpacer();\n    \/\/ ========================================\n\n    \/\/ ========================================\n    stack.addSpacer(6);\n    let btStack = stack.addStack();\n    btStack.centerAlignContent();\n    btStack.addSpacer(6);\n    image = this.getSFSymbol('goforward');\n    let imgSpan = btStack.addImage(image);\n    imgSpan.imageSize = new Size(9, 9);\n    imgSpan.tintColor = refreshTimeTextColor\n    btStack.addSpacer(4);\n    if (this.success) {\n      this.lastUpdate = this.getDateStr(new Date(), 'HH:mm');\n    }\n    textSpan = btStack.addText(`${this.getDateStr(new Date(), 'HH:mm')}`);\n    textSpan.textColor = refreshTimeTextColor\n    textSpan.font = Font.lightSystemFont(10);\n    btStack.addSpacer();\n    image = await this.getImageByUrl(`${this.getRemoteRootPath()}\/img\/ic_logo_10010.png`);\n    imgSpan = btStack.addImage(image);\n    imgSpan.imageSize = new Size(14, 14);\n    stack.addSpacer();\n    \/\/=================================\n    return widget;\n  }\n\n  \/\/ --------------------------NET START--------------------------\n  \/**\n   * ÊµÅÈáèÊ†ºÂºèÂåñ\n   * @param {*} flow \n   * @returns \n   *\/\n  formatFlow = (flow) => {\n    const remain = flow \/ 1024;\n    if (remain < 1024) {\n      return { amount: remain.toFixed(2), unit: 'MB' };\n    }\n    return { amount: (remain \/ 1024).toFixed(2), unit: 'GB' };\n  }\n\n  \/**\n   * Âä†ËΩΩÊòéÁªÜ\n   * @returns \n   *\/\n  loadDetailInfo = async () => {\n    const response = await this.httpGet(\n      this.defaultPreference.fetchUrl.detail,\n      {\n        useCache: this.reset ?? false,\n        dataSuccess: (res) => res.code == 'Y',\n        headers: {\n          'Host': 'm.client.10010.com',\n          'User-Agent': 'ChinaUnicom.x CFNetwork iOS\/16.3 unicom{version:iphone_c@10.0100}',\n          'cookie': this.cookie,\n        }\n      }\n    );\n    if (response?.code == 'Y') {\n      const { feeResource, voiceResource, flowResource } = response;\n      \/\/ ËØùË¥π\n      this.fee = {\n        title: `üì± ${feeResource?.dynamicFeeTitle}Ôºö`,\n        balance: feeResource?.feePersent,\n        unit: feeResource?.newUnit,\n      };\n      \/\/ ËØ≠Èü≥\n      this.voice = {\n        title: `‚è≥ ${voiceResource?.dynamicVoiceTitle}Ôºö`,\n        balance: voiceResource?.voicePersent,\n        percent: 0,\n        unit: voiceResource?.newUnit,\n      };\n      \/\/ ÊµÅÈáè\n      this.flow = {\n        title: `‚õΩÔ∏è ${flowResource?.dynamicFlowTitle}Ôºö`,\n        balance: flowResource?.flowPersent,\n        percent: 0,\n        unit: flowResource?.newUnit,\n      };\n      console.log(`ËØùË¥πÔºö`);\n      console.log(JSON.stringify(this.fee, null, 2));\n      console.log(`ËØ≠Èü≥Ôºö`);\n      console.log(JSON.stringify(this.voice, null, 2));\n      console.log(`ÊµÅÈáèÔºö`);\n      console.log(JSON.stringify(this.flow, null, 2));\n    } else {\n      this.notify('ËÅîÈÄöÂ∞èÁªÑ‰ª∂', `ÂèØËÉΩcookieÂ§±Êïà‰∫Ü~`);\n    }\n  }\n\n  \/\/ --------------------------NET END--------------------------\n}\n\nawait new Widget(Script.name()).run();\n\n\n\/\/ =================================================================================\n\/\/ =================================================================================\nasync function downloadLSPDependency() {\n  let fm = FileManager.local();\n  const fileName = fm.joinPath(fm.documentsDirectory(), `LSP\/${Script.name()}\/settings.json`);\n  const fileExists = fm.fileExists(fileName);\n  let cacheString = '{}';\n  if (fileExists) {\n    cacheString = fm.readString(fileName);\n  }\n  const use_github = JSON.parse(cacheString)['use_github'];\n  const dependencyURL = `${use_github ? remoteGithubRoot : remoteHomeLandRoot}\/_LSP.js`;\n  const update = needUpdateDependency();\n  if (isDev) {\n    const iCloudPath = FileManager.iCloud().documentsDirectory();\n    const localIcloudDependencyExit = fm.isFileStoredIniCloud(`${iCloudPath}\/_LSP.js`);\n    const localDependencyExit = fm.fileExists(`${rootDir}\/_LSP.js`);\n    const fileExist = localIcloudDependencyExit || localDependencyExit;\n    console.log(`üöÄ DEVÂºÄÂèë‰æùËµñÊñá‰ª∂${fileExist ? 'Â∑≤Â≠òÂú® ‚úÖ' : '‰∏çÂ≠òÂú® üö´'}`);\n    if (!fileExist || update) {\n      console.log(`ü§ñ DEV ÂºÄÂßã${update ? 'Êõ¥Êñ∞' + dependencyLSP : '‰∏ãËΩΩ'}‰æùËµñ~`);\n      keySave('VERSION', dependencyLSP);\n      await downloadFile2Scriptable('_LSP', dependencyURL);\n    }\n    return;\n  }\n\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n  console.log(`----------------------------------------`);\n  const remoteDependencyExit = fm.fileExists(`${cacheDir}\/_LSP.js`);\n  console.log(`üöÄ RELEASE‰æùËµñÊñá‰ª∂${remoteDependencyExit ? 'Â∑≤Â≠òÂú® ‚úÖ' : '‰∏çÂ≠òÂú® üö´'}`);\n  \/\/ ------------------------------\n  if (!remoteDependencyExit || update) { \/\/ ‰∏ãËΩΩ‰æùËµñ\n    \/\/ ÂàõÂª∫Ê†πÁõÆÂΩï\n    if (!fm.fileExists(cacheDir)) {\n      fm.createDirectory(cacheDir, true);\n    }\n    \/\/ ‰∏ãËΩΩ\n    console.log(`ü§ñ RELEASEÂºÄÂßã${update ? 'Êõ¥Êñ∞' : '‰∏ãËΩΩ'}‰æùËµñ~`);\n    console.log(`----------------------------------------`);\n    const req = new Request(dependencyURL);\n    const moduleJs = await req.load();\n    if (moduleJs) {\n      fm.write(fm.joinPath(cacheDir, '\/_LSP.js'), moduleJs);\n      keySave('VERSION', dependencyLSP);\n      console.log('‚úÖ LSPËøúÁ®ã‰æùËµñÁéØÂ¢É‰∏ãËΩΩÊàêÂäüÔºÅ');\n      console.log(`----------------------------------------`);\n    } else {\n      console.error('üö´ Ëé∑Âèñ‰æùËµñÁéØÂ¢ÉËÑöÊú¨Â§±Ë¥•ÔºåËØ∑ÈáçËØïÔºÅ');\n      console.log(`----------------------------------------`);\n    }\n  }\n}\n\n\/**\n * Ëé∑Âèñ‰øùÂ≠òÁöÑÊñá‰ª∂Âêç\n * @param {*} fileName \n * @returns \n *\/\nfunction getSaveFileName(fileName) {\n  const hasSuffix = fileName.lastIndexOf(\".\") + 1;\n  return !hasSuffix ? `${fileName}.js` : fileName;\n};\n\n\/**\n * ‰øùÂ≠òÊñá‰ª∂Âà∞ScriptableËΩØ‰ª∂ÁõÆÂΩïÔºåappÂèØÁúãÂà∞\n * @param {*} fileName \n * @param {*} content \n * @returns \n *\/\nfunction saveFile2Scriptable(fileName, content) {\n  try {\n    const fm = FileManager.iCloud();\n    let fileSimpleName = getSaveFileName(fileName);\n    const filePath = fm.joinPath(fm.documentsDirectory(), fileSimpleName);\n    fm.writeString(filePath, content);\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\n\/**\n * ‰∏ãËΩΩjsÊñá‰ª∂Âà∞ScriptableËΩØ‰ª∂ÁõÆÂΩï\n * @param {*} moduleName ÂêçÁß∞ \n * @param {*} url Âú®Á∫øÂú∞ÂùÄ \n * @returns \n *\/\nasync function downloadFile2Scriptable(moduleName, url) {\n  const req = new Request(url);\n  const content = await req.loadString();\n  return saveFile2Scriptable(`${moduleName}`, content);\n};\n\n\/**\n * ÊòØÂê¶ÈúÄË¶ÅÊõ¥Êñ∞‰æùËµñÁâàÊú¨\n *\/\nfunction needUpdateDependency() {\n  return dependencyLSP != keyGet('VERSION');\n};\n\nfunction keySave(cacheKey, cache) {\n  if (cache) {\n    Keychain.set(Script.name() + cacheKey, cache);\n  }\n}\n\nfunction keyGet(cacheKey, defaultValue = '') {\n  if (Keychain.contains(Script.name() + cacheKey)) {\n    return Keychain.get(Script.name() + cacheKey);\n  } else {\n    return defaultValue;\n  }\n}\n\/\/ =================================================================================\n\/\/ =================================================================================",
  "share_sheet_inputs" : [

  ]
}